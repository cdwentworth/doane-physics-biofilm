<?xml version="1.0" encoding="UTF-8"?>
<!--

#########################################################################
 iDynoMiCS: individual-based Dynamics of Microbial Communities Simulator
#########################################################################

-->


<!-- The entire simulation description is contained within the <idynomics> mark-up tags. -->

<idynomics>

	<!--#####################################################################
		SIMULATOR SECTION
	######################################################################-->

	<!-- the <simulator> mark-up defines some global simulation parameters for the run. -->

	<simulator>

        <!-- Set "quietMode" to true if you don't need the log file (saves space and simulation runs slightly faster) -->
        <param name="quietMode">false</param>

		<!-- change this parameter to 'true' for restarting runs from within
			a results folder-->
		<param name="restartPreviousRun">false</param>
		
		<!-- defining this value allows the simulation to be re-run deterministically -->
		<!-- note that if a random.state file is present in the same directory then 
			this will be used instead of the random seed -->
		<param name="randomSeed">42</param>
		
		<!-- this specifies how often the output files should be written -->
		<param name="outputPeriod" unit="hour">1</param>

		<!-- Specifies whether the simulation should check as to whether a new release is available -->
		<param name="checkForReleaseUpdate">true</param>

		<!-- iDynoMiCS may use a fixed or an adaptive global timestep. If 'adaptive' is true,
			then the three 'timeStep***' parameters control the initial, minimum, and maximum
			values the timestep may take. If 'adaptive' is false, then the value for
			'timeStepIni' is used always.
			When the simulation has reached the time specified by 'endOfSimulation', the
			simulation will end. -->
		<timeStep>
			<param name="adaptive">false</param>
			<param name="timeStepIni" unit="hour">1</param>
			<param name="timeStepMin" unit="hour">0.05</param>
			<param name="timeStepMax" unit="hour">1</param>
			<param name="endOfSimulation" unit="day">3</param>
		</timeStep>

		<!-- Attachment scenario - can be 'onetime', where the cells attach to the substratum initially (as in traditional iDynoMiCS)		
		 or selfattach - where the cells start at the boundary layer and attach after a random walk to the substratum (new from Version 1.2) -->
		<param name="attachment">onetime</param>
		<!-- Set the flag "chemostat" to true. The default is false, i.e., if nothing is said a biofilm scenario is simulated-->
		<param name="chemostat">true</param>
		<!-- The AGENTTIMESTEP which should always be EQUAL or LOWER than the global time step -->
		<param name="agentTimeStep" unit="hour">0.05</param>
		<!-- Invasion/Competition simulation. Set to true if the simulation should stop once there is only one species left in the system -->
        <param name="invComp">false</param>
	</simulator>

	<!--#####################################################################
		SOLUTES AND BIOMASS TYPES SECTION
	######################################################################-->

	<!-- This section is where any solutes included in the simulation are defined. Each
		solute must be assigned to a domain (which will be defined later in the protocol
		file), given a name, and must have its diffusivity parameter set.

		Diffusion coefficients are expressed in units of m2.day-1.
	-->

	<solute domain="chemostat" name="MyCOD">
		<param name="diffusivity" unit="m2.day-1">1e-4</param>
	</solute>

	<!-- This section defines the biomass types (NOT species types) that will be used in
		the simulation. The possible types are 'biomass', 'inert', and 'capsule', representing
		active biomass, inert biomass, and capsular material (generally EPS), respectively.
		At a minimum 'biomass' must be defined. The species defined later will be made up of
		these biomass types.

		The densities are expressed in g.L-1 ( = kg.m-3 = fg.um-3).
	-->

	<particle name="biomass">
		<param name="density" unit="g.L-1">150.0</param>
	</particle>
	<particle name="inert">
		<param name="density" unit="g.L-1">150.0</param>
	</particle>
	<particle name="capsule">
		<param name="density" unit="g.L-1">75.0</param>
	</particle>



	<!--#####################################################################
		WORLD SECTION
	######################################################################-->

	<!-- The <world> mark-up describes the overall environment the simulation will model, and
		is made up of several mark-ups:
		- <bulk> for defining a bulk solute compartment that is a source or sink for solutes
			involved in biofilm growth.
		- <computationDomain> for defining the spatial region the biofilm will grow in.
	-->

	<world>
		<!-- CHEMOSTAT: the bulk name MUST be "chemostat" -->
		<bulk name="chemostat">

			<!-- CHEMOSTAT: set to false the parameter "isConstant". Note: setting this parameter to false doesn't invalidate the use of "isConstant"
			for each individual substrate whose concentration you want to remain constant throughout the simulation. -->
			<param name="isConstant">false</param>
			<param name="D" unit="h-1">0.2</param>

			<!-- List the solutes that reside in this bulk compartment, along with the initial
				concentration ('Sbulk') and influent concentration ('Sin'). 

				Concentrations should be given as g.L-1 ( = kg.m-3 = fg.um-3 ).
			-->

			<solute name="MyCOD">
				<param name="Sbulk" unit="g.L-1">1e-3</param>
				<param name="Sin" unit="g.L-1">1e-3</param>
			</solute>
		</bulk>

		<!-- The computation domain is a physical region that will contain the biofilm,
			and has a more complex setup. -->

		<computationDomain name="chemostat">

			<grid nDim="1" nI="1" nJ="1" nK="1"/>
			<param name="resolution" unit="um">2e3</param>

			<boundaryCondition class="BoundaryZeroFlux" name="y0z">
				<shape class="Planar">
					<param name="pointIn" i="-1" j="0" k="0"/>
					<param name="vectorOut" i="-1" j="0" k="0"/>
				</shape>
			</boundaryCondition>

		<!-- CHEMOSTAT: the bulk name MUST be "chemostat" -->
		
			<boundaryCondition class="BoundaryBulk" name="yNz">
				<param name="activeForSolute">yes</param>
				<param name="bulk">chemostat</param>
				<shape class="Planar">
					<param name="pointIn" i="1" j="0" k="0"/>
					<param name="vectorOut" i="1" j="0" k="0"/>
				</shape>
			</boundaryCondition>

			<boundaryCondition class="BoundaryCyclic" name="x0z">
				<shape class="Planar">
					<param name="pointIn" i="0" j="-1" k="0"/>
					<param name="vectorOut" i="0" j="-1" k="0"/>
				</shape>
				<shape class="Planar">
					<param name="pointIn" i="0" j="1" k="0"/>
					<param name="vectorOut" i="0" j="1" k="0"/>
				</shape>
			</boundaryCondition>

			<boundaryCondition class="BoundaryCyclic" name="x0y">
				<shape class="Planar">
					<param name="pointIn" i="0" j="0" k="-1"/>
					<param name="vectorOut" i="0" j="0" k="-1"/>
				</shape>
				<shape class="Planar">
					<param name="pointIn" i="0" j="0" k="1"/>
					<param name="vectorOut" i="0" j="0" k="1"/>
				</shape>
			</boundaryCondition>
		</computationDomain>
	</world>



	<!--#####################################################################
		REACTION SECTION
	######################################################################-->

	<!-- In this next section all the reactions included in the simulation should be defined.
		The <reaction> mark-up defines which type of biomass carries out the reaction. The
		parameter for 'catalyzedBy' should be 'biomass', 'inert', or 'capsule'), and the 'name'
		parameter should be unique to this reaction. The class should be kept as 'ReactionFactor'.

		Then each reaction has a 'muMax' parameter, which is the maximum rate at which the reaction
		may proceed.

		Next are one or more <kineticFactor> mark-ups that define multiplicative factors affecting
		the reaction rate and decreasing the overall rate from muMax to something lower. There are
		several possible types for <kineticFactor>, and each may take a parameter as well as a
		solute that will set the term's value:
			* Monod kinetic: S/(Ks+S)
				<kineticFactor class="MonodKinetic" solute="MyNH4">
					<param name="Ks" unit="g.L-1">1.5e-3</param>
				</kineticFactor>

			* Simple inhibition kinetic: Ki/(Ki+S)
				<kineticFactor class="SimpleInhibition" solute="o2d">
					<param name="Ki" unit="g.L-1">1.5e-3</param>
				</kineticFactor>

			* Haldane kinetic: S/(Ks + S + S^2/Ki)
				<kineticFactor class="HaldaneKinetic" solute="MyNO3">
					<param name="Ks" unit="g.L-1">0.05e-3</param>
					<param name="Ki" unit="g.L-1">0.25e-3</param>
				</kineticFactor>

			* Hill kinetic: S^h/(Ks^h + S^h)
				<kineticFactor class="HillKinetic" solute="MyCOD">
					<param name="Ks" unit="g.L-1">0.05e-3</param>
					<param name="h" unit="-">0.5</param>
				</kineticFactor>
			
			* First-order kinetic: always gives value 1, for nonvarying rates
				<kineticFactor class="FirstOrderKinetic"/>


		After specifying the reaction kinetic factors, you must specify the coefficients
		of solute and biomass production and consumption; these are in the <yield> mark-up.
		The affected solutes and biomass are each listed with a coefficient, and positive
		values indicate production while negative values indicate consumption. A line such as:
			<param name="MyCOD" unit="g.g-1">-1.5</param>
		specifies the consumption of 'MyNH4' during the reaction on a gram-per-gram basis
		with the catalyzing ('catalyzedBy') biomass type. In the above line, production of
		a total of one gram of biomass will consume 1.5 grams of 'MyCOD'.

	-->

	<reaction catalyzedBy="biomass" class="ReactionFactor" name="MyGrowthHeterotrophs">
		<param name="muMax" unit="hour-1">0.7</param>
		<kineticFactor class="MonodKinetic" solute="MyCOD">
			<param name="Ks" unit="g.L-1">2.5e-4</param>
		</kineticFactor>
		<yield>
			<param name="MyCOD" unit="g.g-1">-1.5</param>
			<param name="biomass" unit="g.g-1">1.0</param>
		</yield>
	</reaction>

	

	<!--#####################################################################
		SOLVER SECTION
	######################################################################-->

	<!-- The <solver> mark-ups define the solvers to be used in calculating different
		aspects of the simulation -->

	<!-- CHEMOSTAT SOLVER - Don't forget to use ONLY the solver for the chemostat situation: Solver_chemostat 
	 and thus either delete/comment out the other solvers present in the xml file -->
	<!-- Parameters related to the solver itself: rtol stands for the relative tolerance of the calculated error;
		hmax is maximum internal step of the solver. -->

	<solver class="Solver_chemostat" name="solver1" domain="chemostat">
		<param name="rtol">1e-2</param>
	 	<param name="hmax">1e-3</param>
		<param name="active">true</param>

		<reaction name="MyGrowthHeterotrophs"/>
	</solver>


	<!--#####################################################################
		AGENT GRID SECTION
	######################################################################-->

	<!-- The agent grid contains and manages all agents living in the given domain.
		The parameters should be adjusted to match the simulation conditions. -->

	<agentGrid>
		<!-- domain of agents to manage -->
		<param name="computationDomain">chemostat</param>
	</agentGrid>


	<!--#####################################################################
		SPECIES SECTION
	######################################################################-->

	<!-- The final part of the protocol file is used to define the species involved
		in the current simulation using <species> mark-ups. Each species is defined
		from one of several different classes, and each is given a name and
		has some defining parameters. These are described in detail here.
		
		Following the opening mark-up is the list of <particle> types that make up this
		species; bacteria species will generally have biomass, inert, and
		capsule <particle>s, while EPS will have only capsule. You may specify the
		initial mass of the compartment, or set it to 0 to allow a random value.  

		Now we show the parameters that are common to most species:
		* the color is used to distinguish agents in POV-Ray output images
			<param name="color">yellow</param>
		* you must define which domain the agents will live in
			<param name="computationDomain">chemostat</param>
		* you must specify how large the agents may be before dividing; the actual
			division decision will be based on a standard deviation around this value
			<param name="divRadius" unit="um">2</param>
		* you must specify the size below which the agent is removed from the simulation
			<param name="deathRadius" unit="um">0.1</param>
		* the 'shoveFactor' parameter controls how much overlap there is for agents of
			this species; =1 is touching, <1 is overlap, and >1 provides space around
			the agent
			<param name="shoveFactor" unit="um">1</param>
		* the 'shoveLimit' parameter sets the overlap allowed before shoving occurs,
			and is usally kept at 0
			<param name="shoveLimit" unit="um">0.</param>

		Next come the parameters unique to a species, and we explain those below.

		After the unique parameters comes a list of reactions that this species is
		involved with, using the <reaction> mark-ups. If the 'status' is set to 'inactive',
		then the reaction will not be carried out by the species for this simulation.

		Finally, you need to declare parameters on how each species begins life in the simulaton.
		This will depend on whether you are using traditional one-time attachment or the new self-attachment
		scenario. You set this in the ATTACHMENT tag in the SIMULATOR section

		FOR ONETIME ATTACHMENT (AS IN TRADITIONAL VERSIONS OF IDYNOMICS):
		The <initArea> mark-up defines the rectangular region within which
		the given number of individuals of this species should be placed; the agents
		will be placed randomly in this region. The coordinates should be given in spatial
		(micron) units, not element # (unitless). The 'birthday' parameter sets when
		in the simulation the agents should be introduced. You may define any number
		of <initArea> regions, and if <initArea> is omitted, no agents will be created
		automatically.

		FOR SELF-ATTACHMENT SCENARIOS (NEW TO IDYNOMICS VERSION 1.2):
		- Specify the hour that cell injection begins in parameter "cellInjectionStartHour" - this can be set to 0 if from the start of the simulation
		- Specify the cell attachment frequency during injection (per hour) in parameter "injectionOnAttachmentFrequency" - i.e. number of cells that 
			attach to the substratum or biofilm per hour when injection on
		- Specify the hour at which cell injection stops, in parameter "cellInjectionEndHour". No more cells will be introduced in the simulation from that point
		- Specify the cell attachment frequency during injection (per hour) in parameter "injectionOffAttachmentFrequency" - i.e. number of cells that 
			attach to the substratum or biofilm per hour when injection off


		POSSIBLE SPECIES TYPES:

		ParticulateEPS: this represents generic extracellular polymers and contains only
			the 'capsule' <particle> type. This <species> has no unique parameters.

		Bacterium: this is a generic bacteria species that is generally composed of
			biomass, inert, and capsule compartments. If the <particle> type 'capsule' is
			included, you must specify the type of EPS that will be excreted using the
			'class' parameter; the argument should be one of the EPS <species> you have
			PREVIOUSLY defined in the mark-up. (If you use a <species> here that appears
			later in the protocol file, an error will results.)
		
			The unique parameter you may define is 'epsMax', which sets the maximum
			fraction (by volume) of the agent that may be taken up by EPS:
			<param name="epsMax">0.1</param>

		BactEPS: this <species> is the same as Bacterium, but with the additional
			functionality of a first-order hydrolysis of bound EPS in the 'capsule' compartment.
			You may specify the hydrolysis rate:
			<param name="kHyd" unit="hr-1">0.007</param>

		BactAdaptable: this <species> derives from BactEPS, but adds the ability to turn
			reactions on or off depending on different conditions. After specifying ALL
			reactions that this species may carry out in the <reaction> mark-ups, the
			<reactionSwitch> mark-up defines when those reactions will be utilized. The
			mark-up is shown here and explained below:

		-->


	<species class="Bacterium" name="MyHeterotroph">
		<particle name="biomass">
			<param name="mass" unit="fg">0</param>
		</particle>
		<particle name="inert">
			<param name="mass" unit="fg">0</param>
		</particle>

		<param name="color">blue</param>
		<param name="computationDomain">chemostat</param>
		<param name="divRadius" unit="um">2</param>
		<param name="divRadiusCV">0.1</param>
		<param name="deathRadius" unit="um">0.2</param>
		<param name="deathRadiusCV">0.1</param>
		<param name="babyMassFrac">0.5</param>
		<param name="babyMassFracCV">0.05</param>
		<param name="shoveFactor" unit="um">1.15</param>
		<param name="shoveLimit" unit="um">0.</param>

		<param name="epsMax">0.1</param>
		<param name="kHyd" unit="hr-1">0.007</param>

		<reaction name="MyGrowthHeterotrophs" status="active"/>

		<initArea number="10">
			<param name="birthday" unit="hour">0</param>
			<coordinates x="0" y="0" z="0"/>
			<coordinates x="1" y="1" z="0"/>
		</initArea>
	</species>

	
</idynomics>
